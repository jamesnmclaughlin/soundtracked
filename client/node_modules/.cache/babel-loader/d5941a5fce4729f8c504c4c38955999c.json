{"ast":null,"code":"import _slicedToArray from \"/Users/jamesmclaughlin/Sites/soundtracked/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport React from 'react';\n\n//  -- getServiceID() --\n// A function to retrieve the client ID from the backend node.js server.\n//\n// REQUIRES: \n//      service_name: A string parameter identifying the service e.g Strava, Fitbit... \n// \nfunction getServiceID(service_name) {\n  var _React$useState = React.useState(null),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    data = _React$useState2[0],\n    setData = _React$useState2[1];\n  var options = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      service_name: service_name\n    })\n  };\n  React.useEffect(function () {\n    fetch(\"/get-client\", options).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      return setData(data.key);\n    });\n  }, []);\n  return data;\n}\n\n//  -- checkServiceConnection() --\n// A function to check the service connection of the specified service\n// if the application has lost connection then result returned is false.\n//\n// REQUIRES: \n//      service_name: A string parameter identifying the service e.g Strava, Fitbit... \n// \nfunction checkServiceConnection(service_name) {\n  var stillConnected = false;\n  if (localStorage.getItem(service_name + '_access_token') !== null) {\n    // LAST.FM does not provide an expiry date and therefore cannot expire\n    // IGNORE EXPIRY DATE\n    if (service_name !== \"lastfm\") {\n      if (localStorage.getItem(service_name + '_expiry_date') !== null) {\n        if (Date.parse(localStorage.getItem(service_name + '_expiry_date')) > Date.now()) {\n          stillConnected = true;\n        }\n      }\n    } else {\n      stillConnected = true;\n    }\n  }\n  return stillConnected;\n}\nfunction reconnectService(service_name) {\n  useEffect(function () {\n    fetch(\"/refresh-session\", options).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      console.log(data);\n      if (data.hasOwnProperty('token')) {\n        localStorage.setItem(service_name + '_access_token', data.token);\n      }\n      if (data.hasOwnProperty('exp_date')) {\n        localStorage.setItem(service_name + '_expiry_date', data.exp_date);\n      }\n      if (data.hasOwnProperty('refresh_token')) {\n        localStorage.setItem(service_name + '_refresh_token', data.refresh_token);\n      }\n      setLoading(false);\n    });\n  }, []);\n}\nexport { checkServiceConnection, getServiceID };","map":{"version":3,"names":["React","getServiceID","service_name","_React$useState","useState","_React$useState2","_slicedToArray","data","setData","options","method","headers","body","JSON","stringify","useEffect","fetch","then","res","json","key","checkServiceConnection","stillConnected","localStorage","getItem","Date","parse","now","reconnectService","console","log","hasOwnProperty","setItem","token","exp_date","refresh_token","setLoading"],"sources":["/Users/jamesmclaughlin/Sites/soundtracked/client/src/components/functions/functions.js"],"sourcesContent":["import React from 'react';\n\n\n//  -- getServiceID() --\n// A function to retrieve the client ID from the backend node.js server.\n//\n// REQUIRES: \n//      service_name: A string parameter identifying the service e.g Strava, Fitbit... \n// \nfunction getServiceID(service_name) {\n    const [data, setData] = React.useState(null);\n\n    const options = {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ service_name: service_name })\n    }\n\n    React.useEffect(() => {\n        fetch(\"/get-client\", options)\n          .then((res) => res.json())\n          .then((data) => setData(data.key));\n      }, []);\n\n    return data;\n}\n\n//  -- checkServiceConnection() --\n// A function to check the service connection of the specified service\n// if the application has lost connection then result returned is false.\n//\n// REQUIRES: \n//      service_name: A string parameter identifying the service e.g Strava, Fitbit... \n// \nfunction checkServiceConnection(service_name) {\n\n    let stillConnected = false;\n\n    if (localStorage.getItem(service_name + '_access_token') !== null) {\n\n        // LAST.FM does not provide an expiry date and therefore cannot expire\n        // IGNORE EXPIRY DATE\n        if (service_name !== \"lastfm\") {\n\n            if (localStorage.getItem(service_name + '_expiry_date') !== null) {\n                if (Date.parse(localStorage.getItem(service_name + '_expiry_date')) > Date.now()) {\n                    stillConnected = true;\n                }\n            }\n        }\n        else {\n            stillConnected = true\n        }\n    }\n    \n    return stillConnected;\n}\n\nfunction reconnectService(service_name) {\n\n    useEffect(() => {\n        fetch(\"/refresh-session\", options)\n            .then((res) => res.json())\n            .then((data) => {\n                console.log(data);\n\n                if (data.hasOwnProperty('token')) {\n                    localStorage.setItem(service_name + '_access_token', data.token);\n                }\n                if (data.hasOwnProperty('exp_date')) {\n                    localStorage.setItem(service_name + '_expiry_date', data.exp_date);\n                }\n                if (data.hasOwnProperty('refresh_token')) {\n                    localStorage.setItem(service_name + '_refresh_token', data.refresh_token);\n                }\n                setLoading(false);\n            });\n      \n    }, []);\n\n}\n\n\nexport {checkServiceConnection, getServiceID };"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;;AAGzB;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,YAAYA,CAACC,YAAY,EAAE;EAAA,IAAAC,eAAA,GACRH,KAAK,CAACI,QAAQ,CAAC,IAAI,CAAC;IAAAC,gBAAA,GAAAC,cAAA,CAAAH,eAAA;IAArCI,IAAI,GAAAF,gBAAA;IAAEG,OAAO,GAAAH,gBAAA;EAEpB,IAAMI,OAAO,GAAG;IACZC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEZ,YAAY,EAAEA;IAAa,CAAC;EACvD,CAAC;EAEDF,KAAK,CAACe,SAAS,CAAC,YAAM;IAClBC,KAAK,CAAC,aAAa,EAAEP,OAAO,CAAC,CAC1BQ,IAAI,CAAC,UAACC,GAAG;MAAA,OAAKA,GAAG,CAACC,IAAI,EAAE;IAAA,EAAC,CACzBF,IAAI,CAAC,UAACV,IAAI;MAAA,OAAKC,OAAO,CAACD,IAAI,CAACa,GAAG,CAAC;IAAA,EAAC;EACtC,CAAC,EAAE,EAAE,CAAC;EAER,OAAOb,IAAI;AACf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASc,sBAAsBA,CAACnB,YAAY,EAAE;EAE1C,IAAIoB,cAAc,GAAG,KAAK;EAE1B,IAAIC,YAAY,CAACC,OAAO,CAACtB,YAAY,GAAG,eAAe,CAAC,KAAK,IAAI,EAAE;IAE/D;IACA;IACA,IAAIA,YAAY,KAAK,QAAQ,EAAE;MAE3B,IAAIqB,YAAY,CAACC,OAAO,CAACtB,YAAY,GAAG,cAAc,CAAC,KAAK,IAAI,EAAE;QAC9D,IAAIuB,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAACtB,YAAY,GAAG,cAAc,CAAC,CAAC,GAAGuB,IAAI,CAACE,GAAG,EAAE,EAAE;UAC9EL,cAAc,GAAG,IAAI;QACzB;MACJ;IACJ,CAAC,MACI;MACDA,cAAc,GAAG,IAAI;IACzB;EACJ;EAEA,OAAOA,cAAc;AACzB;AAEA,SAASM,gBAAgBA,CAAC1B,YAAY,EAAE;EAEpCa,SAAS,CAAC,YAAM;IACZC,KAAK,CAAC,kBAAkB,EAAEP,OAAO,CAAC,CAC7BQ,IAAI,CAAC,UAACC,GAAG;MAAA,OAAKA,GAAG,CAACC,IAAI,EAAE;IAAA,EAAC,CACzBF,IAAI,CAAC,UAACV,IAAI,EAAK;MACZsB,OAAO,CAACC,GAAG,CAACvB,IAAI,CAAC;MAEjB,IAAIA,IAAI,CAACwB,cAAc,CAAC,OAAO,CAAC,EAAE;QAC9BR,YAAY,CAACS,OAAO,CAAC9B,YAAY,GAAG,eAAe,EAAEK,IAAI,CAAC0B,KAAK,CAAC;MACpE;MACA,IAAI1B,IAAI,CAACwB,cAAc,CAAC,UAAU,CAAC,EAAE;QACjCR,YAAY,CAACS,OAAO,CAAC9B,YAAY,GAAG,cAAc,EAAEK,IAAI,CAAC2B,QAAQ,CAAC;MACtE;MACA,IAAI3B,IAAI,CAACwB,cAAc,CAAC,eAAe,CAAC,EAAE;QACtCR,YAAY,CAACS,OAAO,CAAC9B,YAAY,GAAG,gBAAgB,EAAEK,IAAI,CAAC4B,aAAa,CAAC;MAC7E;MACAC,UAAU,CAAC,KAAK,CAAC;IACrB,CAAC,CAAC;EAEV,CAAC,EAAE,EAAE,CAAC;AAEV;AAGA,SAAQf,sBAAsB,EAAEpB,YAAY"},"metadata":{},"sourceType":"module"}