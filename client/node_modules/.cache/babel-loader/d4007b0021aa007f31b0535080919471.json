{"ast":null,"code":"import _slicedToArray from \"/Users/jamesmclaughlin/Sites/soundtracked/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/jamesmclaughlin/Sites/soundtracked/client/src/components/pages/Test.js\";\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nimport React, { useState, useEffect } from 'react';\nimport { checkServiceConnection, searchFunction, spotifySearch, audioFeatures, getStravaActivities, getStravaActivityInfo } from '../functions/functions';\nexport default function Test() {\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    response = _useState2[0],\n    setResponse = _useState2[1]; //const [resultData, setResultData] = useState([]);\n  var _useState3 = useState(true),\n    _useState4 = _slicedToArray(_useState3, 2),\n    isLoading = _useState4[0],\n    setLoading = _useState4[1];\n  var trackInfo = null;\n  var fetchData = function fetchData() {\n    var resultJSON = [];\n    var hasHeartRateCounter = 0;\n    var average_distance = 0;\n    var average_heartrate = 0;\n    var average_elevation_change = 0;\n    var average_speed = 0;\n    getStravaActivities(function (stravaActivities) {\n      var _iterator = _createForOfIteratorHelper(stravaActivities),\n        _step;\n      try {\n        var _loop = function _loop() {\n          var activity = _step.value;\n          // Ignore Activity If Not a Run\n          if (activity.type == \"Run\") {\n            console.log(activity);\n            var resultData = [];\n\n            // Get Heartrate data from activity if it exists\n            if (activity.has_heartrate) {\n              hasHeartRateCounter += 1;\n              average_heartrate += activity.average_heartrate;\n            }\n            average_distance += activity.distance;\n            average_elevation_change += Math.abs(activity.elev_high - activity.elev_low);\n            average_speed += activity.average_speed;\n\n            // Convert Activity's Local Start Time to Unix Timestamp (seconds)\n            var start_date = Math.floor(new Date(activity.start_date).getTime() / 1000);\n            var end_date = null;\n\n            // Get extra activity information such as split metrics\n            getStravaActivityInfo(activity.id, function (activityStream) {\n              var sampling_rate = 100;\n\n              // grab current value\n              // check if there are 100 values ahead\n              // if no grab end value if not already current\n              // if yes grab value 100 ahead\n              // work difference between values\n              var _loop2 = function _loop2() {\n                var start_time = activityStream.time.data[i];\n                var start_distance = activityStream.distance.data[i];\n                var end_time = null;\n                var end_distance = null;\n                if (activityStream.distance.original_size > i + 100) {\n                  end_time = activityStream.time.data[i + 100];\n                  end_distance = activityStream.distance.data[i + 100];\n                } else {\n                  end_time = activityStream.time.data[activityStream.distance.original_size - 1];\n                  end_distance = activityStream.distance.data[activityStream.distance.original_size - 1];\n                }\n                var time_diff = end_time - start_time;\n                var distance_diff = end_distance - start_distance;\n\n                // Determine Average Pace Metric (s/m)\n                var pace = time_diff / distance_diff;\n\n                // Check if metric has a adjusted elevation metric \n\n                // Find Songs Listened to between each split time\n\n                // After finding the songs listened to build an object with the metric pace and song features\n\n                end_date = start_date + time_diff;\n                if (checkServiceConnection(\"lastfm\")) {\n                  fetch(\"/get-lastfm-songs?start_date=\" + start_date + \"&end_date=\" + end_date + \"&user=\" + localStorage.getItem(\"lastfm_name\")).then(function (res) {\n                    return res.json();\n                  }).then(function (data) {\n                    setResponse(data.response.recenttracks.track);\n                    if (data.response.recenttracks.track.length > 0) {\n                      searchFunction(pace, data.response.recenttracks.track).then(function (trackList) {\n                        resultData = resultData.concat(trackList);\n                        console.log(resultData);\n                      });\n                    }\n                    setLoading(false);\n                  });\n                }\n                //console.log(\"Start Date: \" + start_date)\n                //console.log(\"End Date: \" + end_date)\n\n                start_date = end_date + 1;\n              };\n              for (var i = 0; i < activityStream.distance.original_size - 1; i += sampling_rate) {\n                _loop2();\n              }\n            });\n            resultJSON.push({\n              id: activity.id,\n              name: activity.name,\n              start_date: activity.start_date,\n              distance: activity.distance,\n              elapsed_time: activity.elapsed_time,\n              visibility: activity.visibility,\n              activity_metrics: resultData\n            });\n          }\n        };\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          _loop();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      console.log(resultJSON);\n      average_distance = average_distance / stravaActivities.length;\n      average_elevation_change = average_elevation_change / stravaActivities.length;\n      average_heartrate = average_heartrate / hasHeartRateCounter;\n      average_speed = average_speed / stravaActivities.length;\n      console.log(\"Average Distance: \" + average_distance);\n      console.log(\"Average Elevation Change: \" + average_elevation_change);\n      console.log(\"Average Heart Rate: \" + average_heartrate);\n      console.log(\"Average Speed: \" + average_speed);\n    });\n  };\n  useEffect(function () {\n    fetchData();\n  }, []);\n  if (isLoading) {\n    return /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        color: '#000'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 16\n      }\n    }, \"Loading\");\n  }\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      color: '#000'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }\n  }, \"Loaded\"));\n}","map":{"version":3,"names":["React","useState","useEffect","checkServiceConnection","searchFunction","spotifySearch","audioFeatures","getStravaActivities","getStravaActivityInfo","Test","_useState","_useState2","_slicedToArray","response","setResponse","_useState3","_useState4","isLoading","setLoading","trackInfo","fetchData","resultJSON","hasHeartRateCounter","average_distance","average_heartrate","average_elevation_change","average_speed","stravaActivities","_iterator","_createForOfIteratorHelper","_step","_loop","activity","value","type","console","log","resultData","has_heartrate","distance","Math","abs","elev_high","elev_low","start_date","floor","Date","getTime","end_date","id","activityStream","sampling_rate","_loop2","start_time","time","data","i","start_distance","end_time","end_distance","original_size","time_diff","distance_diff","pace","fetch","localStorage","getItem","then","res","json","recenttracks","track","length","trackList","concat","push","name","elapsed_time","visibility","activity_metrics","s","n","done","err","e","f","createElement","style","color","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/jamesmclaughlin/Sites/soundtracked/client/src/components/pages/Test.js"],"sourcesContent":["import React, {useState, useEffect} from 'react';\nimport { checkServiceConnection, searchFunction, spotifySearch, audioFeatures, getStravaActivities, getStravaActivityInfo } from '../functions/functions';\n\nexport default function Test() {\n    \n    const [response, setResponse] = useState([]);\n    //const [resultData, setResultData] = useState([]);\n    const [isLoading, setLoading] = useState(true)\n    let trackInfo = null;\n\n    const fetchData = () => {\n\n        let resultJSON = [];\n        let hasHeartRateCounter = 0;\n        let average_distance = 0;\n        let average_heartrate = 0;\n        let average_elevation_change = 0;\n        let average_speed = 0;\n\n\n        getStravaActivities(function(stravaActivities) {\n\n            for (let activity of stravaActivities) {\n\n                // Ignore Activity If Not a Run\n                if (activity.type == \"Run\") {\n\n                    console.log(activity)\n                    let resultData = [];\n                    \n                    // Get Heartrate data from activity if it exists\n                    if (activity.has_heartrate) {\n                        hasHeartRateCounter += 1;\n                        average_heartrate += activity.average_heartrate;\n                    }\n\n                    average_distance += activity.distance;\n                    average_elevation_change += Math.abs(activity.elev_high - activity.elev_low);\n                    average_speed += activity.average_speed;\n\n                    // Convert Activity's Local Start Time to Unix Timestamp (seconds)\n                    let start_date = Math.floor(new Date(activity.start_date).getTime() / 1000);\n                    let end_date = null;\n\n                    // Get extra activity information such as split metrics\n                    getStravaActivityInfo(activity.id, function(activityStream) {\n\n                        let sampling_rate = 100;\n\n                        // grab current value\n                        // check if there are 100 values ahead\n                        // if no grab end value if not already current\n                        // if yes grab value 100 ahead\n                        // work difference between values\n                        for (let i = 0; i < (activityStream.distance.original_size - 1); i += sampling_rate) {\n\n                            let start_time = activityStream.time.data[i];\n                            let start_distance = activityStream.distance.data[i];\n                            let end_time = null;\n                            let end_distance = null;\n\n                            if (activityStream.distance.original_size > (i + 100) ) {\n                                end_time = activityStream.time.data[i+100];\n                                end_distance = activityStream.distance.data[i+100];\n                            } else {\n                                end_time = activityStream.time.data[activityStream.distance.original_size-1];\n                                end_distance = activityStream.distance.data[activityStream.distance.original_size-1];\n                            }\n\n                            let time_diff = end_time - start_time;\n                            let distance_diff = end_distance - start_distance;\n\n                            // Determine Average Pace Metric (s/m)\n                            let pace = time_diff / distance_diff;\n\n                            // Check if metric has a adjusted elevation metric \n\n                            // Find Songs Listened to between each split time\n\n                            // After finding the songs listened to build an object with the metric pace and song features\n\n\n                            end_date = start_date + time_diff;\n\n                            \n                            if (checkServiceConnection(\"lastfm\")) {\n                                fetch(\"/get-lastfm-songs?start_date=\" + start_date + \"&end_date=\" + end_date + \"&user=\" + localStorage.getItem(\"lastfm_name\"))\n                                    .then(res => res.json())\n                                    .then((data) => {\n                                        setResponse(data.response.recenttracks.track);\n\n                                        if (data.response.recenttracks.track.length > 0) {\n                                            \n                                            searchFunction(pace, data.response.recenttracks.track).then((trackList) => {\n                                                resultData = resultData.concat(trackList);\n                                                console.log(resultData)\n                                            });\n                                        }\n                    \n                                        setLoading(false);\n                                    });\n                            }\n                            //console.log(\"Start Date: \" + start_date)\n                            //console.log(\"End Date: \" + end_date)\n                            \n                            start_date = end_date + 1;\n                        }\n                    })\n\n\n                    resultJSON.push({\n                        id: activity.id,\n                        name: activity.name,\n                        start_date: activity.start_date,\n                        distance: activity.distance,\n                        elapsed_time: activity.elapsed_time,\n                        visibility: activity.visibility,\n                        activity_metrics: resultData\n                    });\n                }\n            }\n            \n            console.log(resultJSON);\n\n            average_distance = average_distance / stravaActivities.length;\n            average_elevation_change = average_elevation_change / stravaActivities.length;\n            average_heartrate = average_heartrate / hasHeartRateCounter; \n            average_speed = average_speed / stravaActivities.length;\n\n            console.log(\"Average Distance: \" + average_distance);\n            console.log(\"Average Elevation Change: \" + average_elevation_change);\n            console.log(\"Average Heart Rate: \" + average_heartrate);\n            console.log(\"Average Speed: \" + average_speed); \n        });\n    }\n\n    useEffect(() => {\n        fetchData();\n    }, []);\n\n    if (isLoading) {\n        return <p style={{color: '#000'}}>Loading</p>;\n    }\n\n    return (\n        <div>\n            <p style={{color: '#000'}}>Loaded</p>\n        </div>\n    )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}