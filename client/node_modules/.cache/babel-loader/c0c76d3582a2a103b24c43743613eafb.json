{"ast":null,"code":"/**\n * A function for converting hex <-> dec w/o loss of precision.\n *\n * The problem is that parseInt(\"0x12345...\") isn't precise enough to convert\n * 64-bit integers correctly.\n *\n * Internally, this uses arrays to encode decimal digits starting with the least\n * significant:\n * 8 = [8]\n * 16 = [6, 1]\n * 1024 = [4, 2, 0, 1]\n *\n * Source: http://www.danvk.org/hex2dec.html\n */\n\n// Adds two arrays for the given base (10 or 16), returning the result.\n// This turns out to be the only \"primitive\" operation we need.\nfunction add(x, y, base) {\n  var z = [];\n  var n = Math.max(x.length, y.length);\n  var carry = 0;\n  var i = 0;\n  while (i < n || carry) {\n    var xi = i < x.length ? x[i] : 0;\n    var yi = i < y.length ? y[i] : 0;\n    var zi = carry + xi + yi;\n    z.push(zi % base);\n    carry = Math.floor(zi / base);\n    i++;\n  }\n  return z;\n}\n\n// Returns a*x, where x is an array of decimal digits and a is an ordinary\n// JavaScript number. base is the number base of the array x.\nfunction multiplyByNumber(num, x, base) {\n  if (num < 0) return null;\n  if (num == 0) return [];\n  var result = [];\n  var power = x;\n  while (true) {\n    if (num & 1) {\n      result = add(result, power, base);\n    }\n    num = num >> 1;\n    if (num === 0) break;\n    power = add(power, power, base);\n  }\n  return result;\n}\nfunction parseToDigitsArray(str, base) {\n  var digits = str.split('');\n  var ary = [];\n  for (var i = digits.length - 1; i >= 0; i--) {\n    var n = parseInt(digits[i], base);\n    if (isNaN(n)) return null;\n    ary.push(n);\n  }\n  return ary;\n}\nfunction convertBase(str, fromBase, toBase) {\n  var digits = parseToDigitsArray(str, fromBase);\n  if (digits === null) return null;\n  var outArray = [];\n  var power = [1];\n  for (var i = 0; i < digits.length; i++) {\n    // invariant: at this point, fromBase^i = power\n    if (digits[i]) {\n      outArray = add(outArray, multiplyByNumber(digits[i], power, toBase), toBase);\n    }\n    power = multiplyByNumber(fromBase, power, toBase);\n  }\n  var out = '';\n  for (var i = outArray.length - 1; i >= 0; i--) {\n    out += outArray[i].toString(toBase);\n  }\n  if (out === '') {\n    out = '0';\n  }\n  return out;\n}\nfunction decToHex(decStr, opts) {\n  var hidePrefix = opts && opts.prefix === false;\n  var hex = convertBase(decStr, 10, 16);\n  return hex ? hidePrefix ? hex : '0x' + hex : null;\n}\nfunction hexToDec(hexStr) {\n  if (hexStr.substring(0, 2) === '0x') hexStr = hexStr.substring(2);\n  hexStr = hexStr.toLowerCase();\n  return convertBase(hexStr, 16, 10);\n}\nmodule.exports = {\n  hexToDec: hexToDec,\n  decToHex: decToHex\n};","map":null,"metadata":{},"sourceType":"script"}