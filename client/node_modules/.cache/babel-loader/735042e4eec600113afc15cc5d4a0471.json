{"ast":null,"code":"import _slicedToArray from \"/Users/jamesmclaughlin/Sites/soundtracked/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/jamesmclaughlin/Sites/soundtracked/client/src/components/pages/Test.js\";\nimport React, { useState, useEffect } from 'react';\nimport { checkServiceConnection, searchFunction, spotifySearch, audioFeatures, getStravaActivities, getStravaActivityInfo } from '../functions/functions';\nexport default function Test() {\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    response = _useState2[0],\n    setResponse = _useState2[1]; //const [resultData, setResultData] = useState([]);\n  var _useState3 = useState(true),\n    _useState4 = _slicedToArray(_useState3, 2),\n    isLoading = _useState4[0],\n    setLoading = _useState4[1];\n  var trackInfo = null;\n  var fetchData = function fetchData() {\n    getStravaActivities(function (stravaActivities) {\n      var hasHeartRateCounter = 0;\n      var average_distance = 0;\n      var average_heartrate = 0;\n      var average_elevation_change = 0;\n      var average_speed = 0;\n      stravaActivities.map(function (activity) {\n        // Ignore Activity If Not a Run\n        if (activity.type == \"Run\") {\n          console.log(activity);\n\n          // Get Heartrate data from activity if it exists\n          if (activity.has_heartrate) {\n            hasHeartRateCounter += 1;\n            average_heartrate += activity.average_heartrate;\n          }\n          average_distance += activity.distance;\n          average_elevation_change += Math.abs(activity.elev_high - activity.elev_low);\n          average_speed += activity.average_speed;\n\n          // Convert Activity's Local Start Time to Unix Timestamp (seconds)\n          var start_date = Math.floor(new Date(activity.start_date).getTime() / 1000);\n          var end_date = null;\n\n          // Get extra activity information such as split metrics\n          getStravaActivityInfo(activity.id, function (activity) {\n            var resultData = [];\n            var sampling_rate = 100;\n            console.log(activity);\n\n            // grab current value\n            // check if there are 100 values ahead\n            // if no grab end value if not already current\n            // if yes grab value 100 ahead\n            // work difference between values\n            // \n            var _loop = function _loop() {\n              var start_time = activity.time.data[i];\n              var start_distance = activity.distance.data[i];\n              var end_time = null;\n              var end_distance = null;\n              if (activity.distance.original_size > i + 100) {\n                end_time = activity.time.data[i + 100];\n                end_distance = activity.distance.data[i + 100];\n              } else {\n                end_time = activity.time.data[activity.distance.original_size - 1];\n                end_distance = activity.distance.data[activity.distance.original_size - 1];\n              }\n              var time_diff = end_time - start_time;\n              var distance_diff = end_distance - start_distance;\n\n              // Determine Average Pace Metric (s/m)\n              var pace = time_diff / distance_diff;\n\n              // Check if metric has a adjusted elevation metric \n\n              // Find Songs Listened to between each split time\n\n              // After finding the songs listened to build an object with the metric pace and song features\n\n              end_date = start_date + time_diff;\n              if (checkServiceConnection(\"lastfm\")) {\n                fetch(\"/get-lastfm-songs?start_date=\" + start_date + \"&end_date=\" + end_date + \"&user=\" + localStorage.getItem(\"lastfm_name\")).then(function (res) {\n                  return res.json();\n                }).then(function (data) {\n                  setResponse(data.response.recenttracks.track);\n                  if (data.response.recenttracks.track.length > 0) {\n                    searchFunction(pace, data.response.recenttracks.track).then(function (trackList) {\n                      resultData = resultData.concat(trackList);\n                    });\n                  }\n                  setLoading(false);\n                });\n              }\n              //console.log(\"Start Date: \" + start_date)\n              //console.log(\"End Date: \" + end_date)\n\n              start_date = end_date + 1;\n            };\n            for (var i = 0; i < activity.distance.original_size - 1; i += sampling_rate) {\n              _loop();\n            }\n          });\n        }\n      });\n      average_distance = average_distance / stravaActivities.length;\n      average_elevation_change = average_elevation_change / stravaActivities.length;\n      average_heartrate = average_heartrate / hasHeartRateCounter;\n      average_speed = average_speed / stravaActivities.length;\n      console.log(\"Average Distance: \" + average_distance);\n      console.log(\"Average Elevation Change: \" + average_elevation_change);\n      console.log(\"Average Heart Rate: \" + average_heartrate);\n      console.log(\"Average Speed: \" + average_speed);\n    });\n  };\n  useEffect(function () {\n    fetchData();\n  }, []);\n  if (isLoading) {\n    return \"Loading\";\n  }\n\n  /*audioFeatures(seedList, function(trackInfo) {\n      console.log(trackInfo);\n  }); */\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      color: '#000'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }\n  }, \"Loaded\"));\n}","map":{"version":3,"names":["React","useState","useEffect","checkServiceConnection","searchFunction","spotifySearch","audioFeatures","getStravaActivities","getStravaActivityInfo","Test","_useState","_useState2","_slicedToArray","response","setResponse","_useState3","_useState4","isLoading","setLoading","trackInfo","fetchData","stravaActivities","hasHeartRateCounter","average_distance","average_heartrate","average_elevation_change","average_speed","map","activity","type","console","log","has_heartrate","distance","Math","abs","elev_high","elev_low","start_date","floor","Date","getTime","end_date","id","resultData","sampling_rate","_loop","start_time","time","data","i","start_distance","end_time","end_distance","original_size","time_diff","distance_diff","pace","fetch","localStorage","getItem","then","res","json","recenttracks","track","length","trackList","concat","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","style","color"],"sources":["/Users/jamesmclaughlin/Sites/soundtracked/client/src/components/pages/Test.js"],"sourcesContent":["import React, {useState, useEffect} from 'react';\nimport { checkServiceConnection, searchFunction, spotifySearch, audioFeatures, getStravaActivities, getStravaActivityInfo } from '../functions/functions';\n\nexport default function Test() {\n    \n    const [response, setResponse] = useState([]);\n    //const [resultData, setResultData] = useState([]);\n    const [isLoading, setLoading] = useState(true)\n    let trackInfo = null;\n\n    const fetchData = () => {\n\n        getStravaActivities(function(stravaActivities) {\n\n            let hasHeartRateCounter = 0;\n            let average_distance = 0;\n            let average_heartrate = 0;\n            let average_elevation_change = 0;\n            let average_speed = 0;\n\n            stravaActivities.map((activity) => {\n\n                // Ignore Activity If Not a Run\n                if (activity.type == \"Run\") {\n\n                    console.log(activity)\n                    \n                    // Get Heartrate data from activity if it exists\n                    if (activity.has_heartrate) {\n                        hasHeartRateCounter += 1;\n                        average_heartrate += activity.average_heartrate;\n                    }\n\n                    average_distance += activity.distance;\n                    average_elevation_change += Math.abs(activity.elev_high - activity.elev_low);\n                    average_speed += activity.average_speed;\n\n                    // Convert Activity's Local Start Time to Unix Timestamp (seconds)\n                    let start_date = Math.floor(new Date(activity.start_date).getTime() / 1000);\n                    let end_date = null;\n\n                    // Get extra activity information such as split metrics\n                    getStravaActivityInfo(activity.id, function(activity) {\n\n                        let resultData = [];\n                        let sampling_rate = 100;\n                        console.log(activity)\n\n                        // grab current value\n                        // check if there are 100 values ahead\n                        // if no grab end value if not already current\n                        // if yes grab value 100 ahead\n                        // work difference between values\n                        // \n                                                \n                        for (let i = 0; i < (activity.distance.original_size - 1); i += sampling_rate) {\n\n                            let start_time = activity.time.data[i];\n                            let start_distance = activity.distance.data[i];\n                            let end_time = null;\n                            let end_distance = null;\n\n                            if (activity.distance.original_size > (i + 100) ) {\n                                end_time = activity.time.data[i+100];\n                                end_distance = activity.distance.data[i+100];\n                            } else {\n                                end_time = activity.time.data[activity.distance.original_size-1];\n                                end_distance = activity.distance.data[activity.distance.original_size-1];\n                            }\n\n                            let time_diff = end_time - start_time;\n                            let distance_diff = end_distance - start_distance;\n\n                            // Determine Average Pace Metric (s/m)\n                            let pace = time_diff / distance_diff;\n\n                            // Check if metric has a adjusted elevation metric \n    \n                            // Find Songs Listened to between each split time\n    \n                            // After finding the songs listened to build an object with the metric pace and song features\n\n    \n                            end_date = start_date + time_diff;\n\n                            \n                            if (checkServiceConnection(\"lastfm\")) {\n                                fetch(\"/get-lastfm-songs?start_date=\" + start_date + \"&end_date=\" + end_date + \"&user=\" + localStorage.getItem(\"lastfm_name\"))\n                                    .then(res => res.json())\n                                    .then((data) => {\n                                        setResponse(data.response.recenttracks.track);\n\n                                        if (data.response.recenttracks.track.length > 0) {\n                                            \n                                            searchFunction(pace, data.response.recenttracks.track).then((trackList) => {\n                                                resultData = resultData.concat(trackList);\n                                            });\n                                        }\n                    \n                                        setLoading(false);\n                                    });\n                            }\n                            //console.log(\"Start Date: \" + start_date)\n                            //console.log(\"End Date: \" + end_date)\n                            \n                            start_date = end_date + 1;\n                        }\n\n                        \n                    });\n\n                }\n\n\n            });\n        \n            average_distance = average_distance / stravaActivities.length;\n            average_elevation_change = average_elevation_change / stravaActivities.length;\n            average_heartrate = average_heartrate / hasHeartRateCounter; \n            average_speed = average_speed / stravaActivities.length;\n\n            console.log(\"Average Distance: \" + average_distance);\n            console.log(\"Average Elevation Change: \" + average_elevation_change);\n            console.log(\"Average Heart Rate: \" + average_heartrate);\n            console.log(\"Average Speed: \" + average_speed);\n            \n        });\n\n\n        \n\n    }\n\n    useEffect(() => {\n        fetchData();\n    }, []);\n\n    if (isLoading) {\n        return \"Loading\";\n    }\n\n    /*audioFeatures(seedList, function(trackInfo) {\n        console.log(trackInfo);\n    }); */   \n\n    return (\n        <div>\n            <p style={{color: '#000'}}>Loaded</p>\n        </div>\n    )\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,EAAEC,SAAS,QAAO,OAAO;AAChD,SAASC,sBAAsB,EAAEC,cAAc,EAAEC,aAAa,EAAEC,aAAa,EAAEC,mBAAmB,EAAEC,qBAAqB,QAAQ,wBAAwB;AAEzJ,eAAe,SAASC,IAAIA,CAAA,EAAG;EAAA,IAAAC,SAAA,GAEKT,QAAQ,CAAC,EAAE,CAAC;IAAAU,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAArCG,QAAQ,GAAAF,UAAA;IAAEG,WAAW,GAAAH,UAAA,KAC5B;EAAA,IAAAI,UAAA,GACgCd,QAAQ,CAAC,IAAI,CAAC;IAAAe,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAAvCE,SAAS,GAAAD,UAAA;IAAEE,UAAU,GAAAF,UAAA;EAC5B,IAAIG,SAAS,GAAG,IAAI;EAEpB,IAAMC,SAAS,GAAG,SAAZA,SAASA,CAAA,EAAS;IAEpBb,mBAAmB,CAAC,UAASc,gBAAgB,EAAE;MAE3C,IAAIC,mBAAmB,GAAG,CAAC;MAC3B,IAAIC,gBAAgB,GAAG,CAAC;MACxB,IAAIC,iBAAiB,GAAG,CAAC;MACzB,IAAIC,wBAAwB,GAAG,CAAC;MAChC,IAAIC,aAAa,GAAG,CAAC;MAErBL,gBAAgB,CAACM,GAAG,CAAC,UAACC,QAAQ,EAAK;QAE/B;QACA,IAAIA,QAAQ,CAACC,IAAI,IAAI,KAAK,EAAE;UAExBC,OAAO,CAACC,GAAG,CAACH,QAAQ,CAAC;;UAErB;UACA,IAAIA,QAAQ,CAACI,aAAa,EAAE;YACxBV,mBAAmB,IAAI,CAAC;YACxBE,iBAAiB,IAAII,QAAQ,CAACJ,iBAAiB;UACnD;UAEAD,gBAAgB,IAAIK,QAAQ,CAACK,QAAQ;UACrCR,wBAAwB,IAAIS,IAAI,CAACC,GAAG,CAACP,QAAQ,CAACQ,SAAS,GAAGR,QAAQ,CAACS,QAAQ,CAAC;UAC5EX,aAAa,IAAIE,QAAQ,CAACF,aAAa;;UAEvC;UACA,IAAIY,UAAU,GAAGJ,IAAI,CAACK,KAAK,CAAC,IAAIC,IAAI,CAACZ,QAAQ,CAACU,UAAU,CAAC,CAACG,OAAO,EAAE,GAAG,IAAI,CAAC;UAC3E,IAAIC,QAAQ,GAAG,IAAI;;UAEnB;UACAlC,qBAAqB,CAACoB,QAAQ,CAACe,EAAE,EAAE,UAASf,QAAQ,EAAE;YAElD,IAAIgB,UAAU,GAAG,EAAE;YACnB,IAAIC,aAAa,GAAG,GAAG;YACvBf,OAAO,CAACC,GAAG,CAACH,QAAQ,CAAC;;YAErB;YACA;YACA;YACA;YACA;YACA;YAAA,IAAAkB,KAAA,YAAAA,MAAA,EAE+E;cAE3E,IAAIC,UAAU,GAAGnB,QAAQ,CAACoB,IAAI,CAACC,IAAI,CAACC,CAAC,CAAC;cACtC,IAAIC,cAAc,GAAGvB,QAAQ,CAACK,QAAQ,CAACgB,IAAI,CAACC,CAAC,CAAC;cAC9C,IAAIE,QAAQ,GAAG,IAAI;cACnB,IAAIC,YAAY,GAAG,IAAI;cAEvB,IAAIzB,QAAQ,CAACK,QAAQ,CAACqB,aAAa,GAAIJ,CAAC,GAAG,GAAI,EAAG;gBAC9CE,QAAQ,GAAGxB,QAAQ,CAACoB,IAAI,CAACC,IAAI,CAACC,CAAC,GAAC,GAAG,CAAC;gBACpCG,YAAY,GAAGzB,QAAQ,CAACK,QAAQ,CAACgB,IAAI,CAACC,CAAC,GAAC,GAAG,CAAC;cAChD,CAAC,MAAM;gBACHE,QAAQ,GAAGxB,QAAQ,CAACoB,IAAI,CAACC,IAAI,CAACrB,QAAQ,CAACK,QAAQ,CAACqB,aAAa,GAAC,CAAC,CAAC;gBAChED,YAAY,GAAGzB,QAAQ,CAACK,QAAQ,CAACgB,IAAI,CAACrB,QAAQ,CAACK,QAAQ,CAACqB,aAAa,GAAC,CAAC,CAAC;cAC5E;cAEA,IAAIC,SAAS,GAAGH,QAAQ,GAAGL,UAAU;cACrC,IAAIS,aAAa,GAAGH,YAAY,GAAGF,cAAc;;cAEjD;cACA,IAAIM,IAAI,GAAGF,SAAS,GAAGC,aAAa;;cAEpC;;cAEA;;cAEA;;cAGAd,QAAQ,GAAGJ,UAAU,GAAGiB,SAAS;cAGjC,IAAIpD,sBAAsB,CAAC,QAAQ,CAAC,EAAE;gBAClCuD,KAAK,CAAC,+BAA+B,GAAGpB,UAAU,GAAG,YAAY,GAAGI,QAAQ,GAAG,QAAQ,GAAGiB,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,CAAC,CACzHC,IAAI,CAAC,UAAAC,GAAG;kBAAA,OAAIA,GAAG,CAACC,IAAI,EAAE;gBAAA,EAAC,CACvBF,IAAI,CAAC,UAACZ,IAAI,EAAK;kBACZnC,WAAW,CAACmC,IAAI,CAACpC,QAAQ,CAACmD,YAAY,CAACC,KAAK,CAAC;kBAE7C,IAAIhB,IAAI,CAACpC,QAAQ,CAACmD,YAAY,CAACC,KAAK,CAACC,MAAM,GAAG,CAAC,EAAE;oBAE7C9D,cAAc,CAACqD,IAAI,EAAER,IAAI,CAACpC,QAAQ,CAACmD,YAAY,CAACC,KAAK,CAAC,CAACJ,IAAI,CAAC,UAACM,SAAS,EAAK;sBACvEvB,UAAU,GAAGA,UAAU,CAACwB,MAAM,CAACD,SAAS,CAAC;oBAC7C,CAAC,CAAC;kBACN;kBAEAjD,UAAU,CAAC,KAAK,CAAC;gBACrB,CAAC,CAAC;cACV;cACA;cACA;;cAEAoB,UAAU,GAAGI,QAAQ,GAAG,CAAC;YAC7B,CAAC;YAnDD,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAItB,QAAQ,CAACK,QAAQ,CAACqB,aAAa,GAAG,CAAE,EAAEJ,CAAC,IAAIL,aAAa;cAAAC,KAAA;YAAA;UAsDjF,CAAC,CAAC;QAEN;MAGJ,CAAC,CAAC;MAEFvB,gBAAgB,GAAGA,gBAAgB,GAAGF,gBAAgB,CAAC6C,MAAM;MAC7DzC,wBAAwB,GAAGA,wBAAwB,GAAGJ,gBAAgB,CAAC6C,MAAM;MAC7E1C,iBAAiB,GAAGA,iBAAiB,GAAGF,mBAAmB;MAC3DI,aAAa,GAAGA,aAAa,GAAGL,gBAAgB,CAAC6C,MAAM;MAEvDpC,OAAO,CAACC,GAAG,CAAC,oBAAoB,GAAGR,gBAAgB,CAAC;MACpDO,OAAO,CAACC,GAAG,CAAC,4BAA4B,GAAGN,wBAAwB,CAAC;MACpEK,OAAO,CAACC,GAAG,CAAC,sBAAsB,GAAGP,iBAAiB,CAAC;MACvDM,OAAO,CAACC,GAAG,CAAC,iBAAiB,GAAGL,aAAa,CAAC;IAElD,CAAC,CAAC;EAKN,CAAC;EAEDxB,SAAS,CAAC,YAAM;IACZkB,SAAS,EAAE;EACf,CAAC,EAAE,EAAE,CAAC;EAEN,IAAIH,SAAS,EAAE;IACX,OAAO,SAAS;EACpB;;EAEA;AACJ;AACA;;EAEI,oBACIjB,KAAA,CAAAqE,aAAA;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACI3E,KAAA,CAAAqE,aAAA;IAAGO,KAAK,EAAE;MAACC,KAAK,EAAE;IAAM,CAAE;IAAAP,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,QAAM,CAAI,CACnC;AAEd"},"metadata":{},"sourceType":"module"}