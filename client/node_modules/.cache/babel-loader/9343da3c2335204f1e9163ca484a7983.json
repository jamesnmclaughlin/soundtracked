{"ast":null,"code":"import _slicedToArray from \"/Users/jamesmclaughlin/Sites/soundtracked/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport React, { useEffect } from 'react';\n\n//  -- getServiceID() --\n// A function to retrieve the client ID from the backend node.js server.\n//\n// REQUIRES: \n//      service_name: A string parameter identifying the service e.g Strava, Fitbit... \n// \nfunction getServiceID(service_name) {\n  var _React$useState = React.useState(null),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    data = _React$useState2[0],\n    setData = _React$useState2[1];\n  var options = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      service_name: service_name\n    })\n  };\n  React.useEffect(function () {\n    fetch(\"/get-client\", options).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      return setData(data.key);\n    });\n  }, []);\n  return data;\n}\n\n//  -- checkIfReconnectionExists() --\n//\n// REQUIRES: \n//      service_name: A string parameter identifying the service e.g Strava, Fitbit... \n// \nfunction checkIfReconnectionExists(service_name) {\n  var connection = false;\n  if (localStorage.getItem(service_name + '_refresh_token') !== null) {\n    connection = true;\n  }\n  return connection;\n}\n\n//  -- checkServiceConnection() --\n// A function to check the service connection of the specified service\n// if the application has lost connection then result returned is false.\n//\n// REQUIRES: \n//      service_name: A string parameter identifying the service e.g Strava, Fitbit... \n// \nfunction checkServiceConnection(service_name) {\n  var stillConnected = false;\n  if (localStorage.getItem(service_name + '_access_token') !== null) {\n    // LAST.FM does not provide an expiry date and therefore cannot expire\n    // IGNORE EXPIRY DATE\n    if (service_name !== \"lastfm\") {\n      if (localStorage.getItem(service_name + '_expiry_date') !== null) {\n        if (Date.parse(localStorage.getItem(service_name + '_expiry_date')) > Date.now()) {\n          stillConnected = true;\n        }\n      }\n    } else {\n      stillConnected = true;\n    }\n  }\n  return stillConnected;\n}\n\n//  -- reconnectService() --\n// A function to refresh the connection of the specified service if the \n// application has lost connection.\n//\n// REQUIRES: \n//      service_name: A string parameter identifying the service e.g Strava, Fitbit... \n// \nfunction reconnectService(service_name) {\n  if (checkIfReconnectionExists(service_name)) {\n    var options = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        code_verify: localStorage.getItem(\"fitbitCV\"),\n        service_name: service_name,\n        refresh_token: localStorage.getItem(service_name + \"_refresh_token\")\n      })\n    };\n    useEffect(function () {\n      fetch(\"/refresh-session\", options).then(function (res) {\n        return res.json();\n      }).then(function (data) {\n        if (data.hasOwnProperty('token')) {\n          localStorage.setItem(service_name + '_access_token', data.token);\n        }\n        if (data.hasOwnProperty('exp_date')) {\n          localStorage.setItem(service_name + '_expiry_date', data.exp_date);\n        }\n        if (data.hasOwnProperty('refresh_token')) {\n          localStorage.setItem(service_name + '_refresh_token', data.refresh_token);\n        }\n      });\n    }, []);\n    return true;\n  }\n  return false;\n}\nfunction checkSpotifyConnection() {\n  var reconnectionRequired = true;\n  if (localStorage.getItem('spotify_access_token') !== null && localStorage.getItem('spotify_expiry_date') !== null) {\n    if (Date.parse(localStorage.getItem('spotify_expiry_date')) > Date.now()) {\n      reconnectionRequired = false;\n    }\n  }\n  var options = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  if (reconnectionRequired) {\n    fetch(\"/get-spotify-session\", options).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      if (data.hasOwnProperty('token')) {\n        localStorage.setItem('spotify_access_token', data.token);\n      }\n      if (data.hasOwnProperty('exp_date')) {\n        localStorage.setItem('spotify_expiry_date', data.exp_date);\n      }\n    });\n  }\n  return localStorage.getItem('spotify_access_token') !== null;\n}\nfunction spotifySearch(artist, year, album, track) {\n  var baseURL = \"https://api.spotify.com/v1/search/\";\n  var postdata = null;\n  if (checkSpotifyConnection()) {\n    fetch(baseURL, {\n      headers: {\n        Authorization: \"Basic \" + localStorage.getItem(\"spotify_access_token\"),\n        \"Content-Type\": \"application/json\"\n      },\n      body: {\n        q: encodeURIComponent(\"track:\" + track + \" artist:\" + artist + \" year:\" + year + \" album:\" + album),\n        type: 'track',\n        limit: 1\n      }\n    }).then(function (res) {\n      return res.json();\n    }).then(function (response) {\n      postdata = response;\n    });\n  }\n  console.log(\"Search Data: \" + postdata);\n  return postdata.tracks.items[0].id;\n}\nfunction getSeeds() {\n  var listOfSongs = [{\n    artist: \"Pendulum\",\n    year: \"2021\",\n    album: \"Elemental\",\n    track: \"Come Alive\"\n  }, {\n    artist: \"Pendulum\",\n    year: \"2005\",\n    album: \"Hold Your Colour\",\n    track: \"Tarantula\"\n  }, {\n    artist: \"Gorilaz\",\n    year: \"2023\",\n    album: \"Cracker Island\",\n    track: \"New Gold\"\n  }, {\n    artist: \"Martin Solveig\",\n    year: \"2016\",\n    album: \"Do It Right\",\n    track: \"Do It Right\"\n  }, {\n    artist: \"Bob Moses\",\n    year: \"2018\",\n    album: \"Battle Lines\",\n    track: \"Back Down\"\n  }];\n  var seedList = null;\n  var trackID = null;\n  listOfSongs.forEach(function (song) {\n    trackID = spotifySearch(song.artist, song.year, song.album, song.track);\n    if (trackID !== null) {\n      if (seedList !== null) {\n        seedList += seedList + \",\";\n      }\n      seedList += trackID;\n    }\n  });\n  return seedList;\n}\nexport { checkServiceConnection, getServiceID, reconnectService, checkIfReconnectionExists, checkSpotifyConnection, getSeeds };","map":{"version":3,"names":["React","useEffect","getServiceID","service_name","_React$useState","useState","_React$useState2","_slicedToArray","data","setData","options","method","headers","body","JSON","stringify","fetch","then","res","json","key","checkIfReconnectionExists","connection","localStorage","getItem","checkServiceConnection","stillConnected","Date","parse","now","reconnectService","code_verify","refresh_token","hasOwnProperty","setItem","token","exp_date","checkSpotifyConnection","reconnectionRequired","spotifySearch","artist","year","album","track","baseURL","postdata","Authorization","q","encodeURIComponent","type","limit","response","console","log","tracks","items","id","getSeeds","listOfSongs","seedList","trackID","forEach","song"],"sources":["/Users/jamesmclaughlin/Sites/soundtracked/client/src/components/functions/functions.js"],"sourcesContent":["import React, { useEffect } from 'react';\n\n\n//  -- getServiceID() --\n// A function to retrieve the client ID from the backend node.js server.\n//\n// REQUIRES: \n//      service_name: A string parameter identifying the service e.g Strava, Fitbit... \n// \nfunction getServiceID(service_name) {\n    const [data, setData] = React.useState(null);\n\n    const options = {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ service_name: service_name })\n    }\n\n    React.useEffect(() => {\n        fetch(\"/get-client\", options)\n          .then((res) => res.json())\n          .then((data) => setData(data.key));\n      }, []);\n\n    return data;\n}\n\n//  -- checkIfReconnectionExists() --\n//\n// REQUIRES: \n//      service_name: A string parameter identifying the service e.g Strava, Fitbit... \n// \nfunction checkIfReconnectionExists(service_name) {\n    let connection = false;\n\n    if (localStorage.getItem(service_name + '_refresh_token') !== null) {\n        connection = true;\n    }\n\n    return connection;\n}\n\n//  -- checkServiceConnection() --\n// A function to check the service connection of the specified service\n// if the application has lost connection then result returned is false.\n//\n// REQUIRES: \n//      service_name: A string parameter identifying the service e.g Strava, Fitbit... \n// \nfunction checkServiceConnection(service_name) {\n\n    let stillConnected = false;\n\n    if (localStorage.getItem(service_name + '_access_token') !== null) {\n\n        // LAST.FM does not provide an expiry date and therefore cannot expire\n        // IGNORE EXPIRY DATE\n        if (service_name !== \"lastfm\") {\n\n            if (localStorage.getItem(service_name + '_expiry_date') !== null) {\n                if (Date.parse(localStorage.getItem(service_name + '_expiry_date')) > Date.now()) {\n                    stillConnected = true;\n                }\n            }\n        }\n        else {\n            stillConnected = true\n        }\n    }\n    \n    return stillConnected;\n}\n\n//  -- reconnectService() --\n// A function to refresh the connection of the specified service if the \n// application has lost connection.\n//\n// REQUIRES: \n//      service_name: A string parameter identifying the service e.g Strava, Fitbit... \n// \nfunction reconnectService(service_name) {\n\n    if (checkIfReconnectionExists(service_name)) {\n\n        const options = {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({ \n                code_verify: localStorage.getItem(\"fitbitCV\"),\n                service_name: service_name,\n                refresh_token: localStorage.getItem(service_name + \"_refresh_token\")\n            })\n        }\n    \n        useEffect(() => {\n            fetch(\"/refresh-session\", options)\n                .then((res) => res.json())\n                .then((data) => {\n    \n                    if (data.hasOwnProperty('token')) {\n                        localStorage.setItem(service_name + '_access_token', data.token);\n                    }\n                    if (data.hasOwnProperty('exp_date')) {\n                        localStorage.setItem(service_name + '_expiry_date', data.exp_date);\n                    }\n                    if (data.hasOwnProperty('refresh_token')) {\n                        localStorage.setItem(service_name + '_refresh_token', data.refresh_token);\n                    }\n                });\n          \n        }, []);\n    \n        return true;\n    }\n\n    return false;\n}\n\nfunction checkSpotifyConnection() {\n\n    let reconnectionRequired = true;\n\n    if (localStorage.getItem('spotify_access_token') !== null && localStorage.getItem('spotify_expiry_date') !== null) {\n        if (Date.parse(localStorage.getItem('spotify_expiry_date')) > Date.now()) {\n            reconnectionRequired = false;\n        }\n    }\n\n    const options = {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" }\n    }\n\n    if (reconnectionRequired) {\n\n        fetch(\"/get-spotify-session\", options)\n            .then((res) => res.json())\n            .then((data) => {\n                if (data.hasOwnProperty('token')) {\n                    localStorage.setItem('spotify_access_token', data.token);\n                }\n                if (data.hasOwnProperty('exp_date')) {\n                    localStorage.setItem('spotify_expiry_date', data.exp_date);\n                }\n            }); \n    }\n\n    return (localStorage.getItem('spotify_access_token') !== null);\n}\n\nfunction spotifySearch(artist, year, album, track) {\n    const baseURL = \"https://api.spotify.com/v1/search/\";\n    let postdata = null;\n\n    if (checkSpotifyConnection()) {\n        fetch(baseURL, {\n            headers: {\n                Authorization: \"Basic \" + localStorage.getItem(\"spotify_access_token\"), \n                \"Content-Type\": \"application/json\"\n            },\n            body: {\n                q: encodeURIComponent(\"track:\" + track + \" artist:\" + artist + \" year:\" + year + \" album:\" + album),\n                type: 'track',\n                limit: 1\n            }\n        })\n        .then(res => res.json())\n        .then((response) => {\n            postdata = response;\n        });\n    }\n\n    console.log(\"Search Data: \" + postdata);\n\n\n    return postdata.tracks.items[0].id;\n}\n\nfunction getSeeds() {\n\n    const listOfSongs = [\n        {\n            artist: \"Pendulum\",\n            year: \"2021\",\n            album: \"Elemental\",\n            track: \"Come Alive\"\n        },\n        {\n            artist: \"Pendulum\",\n            year: \"2005\",\n            album: \"Hold Your Colour\",\n            track: \"Tarantula\"\n        },\n        {\n            artist: \"Gorilaz\",\n            year: \"2023\",\n            album: \"Cracker Island\",\n            track: \"New Gold\"\n        },\n        {\n            artist: \"Martin Solveig\",\n            year: \"2016\",\n            album: \"Do It Right\",\n            track: \"Do It Right\"\n        },\n        {\n            artist: \"Bob Moses\",\n            year: \"2018\",\n            album: \"Battle Lines\",\n            track: \"Back Down\"\n        }\n    ]\n\n    let seedList = null;\n    let trackID = null;\n\n    listOfSongs.forEach((song) => {\n\n        trackID = spotifySearch(song.artist, song.year, song.album, song.track);\n        \n        if (trackID !== null) {\n            if (seedList !== null) {\n                seedList += seedList + \",\";\n            }\n            seedList += trackID;\n        }\n    });\n\n    return seedList;\n\n}\n\nexport { \n    checkServiceConnection, \n    getServiceID, \n    reconnectService, \n    checkIfReconnectionExists, \n    checkSpotifyConnection,\n    getSeeds\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}